name: RAG System CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  # Unit tests for edge functions
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local instance
        run: supabase start

      - name: Wait for Supabase to be ready
        run: |
          echo "Waiting for Supabase to be ready..."
          sleep 60

      - name: Serve edge functions locally
        run: |
          echo "Starting edge functions..."
          supabase functions serve query --no-verify-jwt &
          supabase functions serve process-document --no-verify-jwt &
          sleep 10
          echo "‚úÖ Edge functions serving!"

      - name: Run query unit tests
        run: deno test --allow-net --allow-env supabase/functions/query/test_unit.ts
        env:
          FUNCTION_URL: http://localhost:54321/functions/v1

      - name: Run process-document unit tests
        run: deno test --allow-net --allow-env supabase/functions/process-document/test_unit.ts
        env:
          FUNCTION_URL: http://localhost:54321/functions/v1

      - name: Stop Supabase
        if: always()
        run: supabase stop

  # Integration tests (full workflow)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local instance
        run: supabase start

      - name: Wait for Supabase to be ready
        run: |
          echo "Waiting for Supabase to be ready..."
          sleep 60

      - name: Get local Supabase credentials
        id: supabase-creds
        run: |
          echo "SUPABASE_URL=http://127.0.0.1:54321" >> $GITHUB_OUTPUT
          echo "SUPABASE_ANON_KEY=$(supabase status | grep 'anon key' | awk '{print $3}')" >> $GITHUB_OUTPUT

      - name: Run integration tests
        run: |
          export RUN_INTEGRATION_TESTS=true
          deno test --allow-net --allow-env tests/integration/rag-workflow.test.ts
        env:
          SUPABASE_URL: ${{ steps.supabase-creds.outputs.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ steps.supabase-creds.outputs.SUPABASE_ANON_KEY }}

      - name: Stop Supabase
        if: always()
        run: supabase stop

  # Load testing with k6
  load-tests:
    name: Load Tests (Smoke)
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run k6 smoke test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/k6-load.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          TOKEN: ${{ secrets.BETA_TEST_JWT }}

      - name: Upload k6 results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: k6-results
          path: summary.json

  # Security linting
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and deploy (production only)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, load-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-app.lovableproject.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "üöÄ Deploying to production..."
          echo "All tests passed successfully!"

      - name: Post deployment health check
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

  # Notify on failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, load-tests]
    if: failure()
    steps:
      - name: Send notification
        run: |
          echo "‚ùå CI/CD Pipeline Failed"
          echo "Check the logs for details"
